/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const TOKEN_LOTTERY_DISCRIMINATOR = new Uint8Array([
  219, 174, 104, 58, 76, 30, 61, 218,
]);

export function getTokenLotteryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TOKEN_LOTTERY_DISCRIMINATOR
  );
}

export type TokenLottery = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  winner: bigint;
  winnerChosen: boolean;
  lotteryStart: bigint;
  lotteryEnd: bigint;
  lotteryPotAmount: bigint;
  ticketNum: bigint;
  price: bigint;
  randomnessAccount: Address;
  authority: Address;
};

export type TokenLotteryArgs = {
  bump: number;
  winner: number | bigint;
  winnerChosen: boolean;
  lotteryStart: number | bigint;
  lotteryEnd: number | bigint;
  lotteryPotAmount: number | bigint;
  ticketNum: number | bigint;
  price: number | bigint;
  randomnessAccount: Address;
  authority: Address;
};

export function getTokenLotteryEncoder(): FixedSizeEncoder<TokenLotteryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['winner', getU64Encoder()],
      ['winnerChosen', getBooleanEncoder()],
      ['lotteryStart', getU64Encoder()],
      ['lotteryEnd', getU64Encoder()],
      ['lotteryPotAmount', getU64Encoder()],
      ['ticketNum', getU64Encoder()],
      ['price', getU64Encoder()],
      ['randomnessAccount', getAddressEncoder()],
      ['authority', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: TOKEN_LOTTERY_DISCRIMINATOR })
  );
}

export function getTokenLotteryDecoder(): FixedSizeDecoder<TokenLottery> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['winner', getU64Decoder()],
    ['winnerChosen', getBooleanDecoder()],
    ['lotteryStart', getU64Decoder()],
    ['lotteryEnd', getU64Decoder()],
    ['lotteryPotAmount', getU64Decoder()],
    ['ticketNum', getU64Decoder()],
    ['price', getU64Decoder()],
    ['randomnessAccount', getAddressDecoder()],
    ['authority', getAddressDecoder()],
  ]);
}

export function getTokenLotteryCodec(): FixedSizeCodec<
  TokenLotteryArgs,
  TokenLottery
> {
  return combineCodec(getTokenLotteryEncoder(), getTokenLotteryDecoder());
}

export function decodeTokenLottery<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TokenLottery, TAddress>;
export function decodeTokenLottery<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TokenLottery, TAddress>;
export function decodeTokenLottery<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TokenLottery, TAddress> | MaybeAccount<TokenLottery, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTokenLotteryDecoder()
  );
}

export async function fetchTokenLottery<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TokenLottery, TAddress>> {
  const maybeAccount = await fetchMaybeTokenLottery(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenLottery<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TokenLottery, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTokenLottery(maybeAccount);
}

export async function fetchAllTokenLottery(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TokenLottery>[]> {
  const maybeAccounts = await fetchAllMaybeTokenLottery(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTokenLottery(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TokenLottery>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTokenLottery(maybeAccount));
}

export function getTokenLotterySize(): number {
  return 122;
}
