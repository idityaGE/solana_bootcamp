/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { TOKENLOTTERY_PROGRAM_ADDRESS } from '../programs';

/** IncorrectRandomnessAccount: Incorrect randomness account */
export const TOKENLOTTERY_ERROR__INCORRECT_RANDOMNESS_ACCOUNT = 0x1770; // 6000
/** LotteryNotCompleted: Lottery not completed */
export const TOKENLOTTERY_ERROR__LOTTERY_NOT_COMPLETED = 0x1771; // 6001
/** LotteryNotOpen: Lottery is not open */
export const TOKENLOTTERY_ERROR__LOTTERY_NOT_OPEN = 0x1772; // 6002
/** NotAuthorized: Not authorized */
export const TOKENLOTTERY_ERROR__NOT_AUTHORIZED = 0x1773; // 6003
/** RandomnessAlreadyRevealed: Randomness already revealed */
export const TOKENLOTTERY_ERROR__RANDOMNESS_ALREADY_REVEALED = 0x1774; // 6004
/** RandomnessNotResolved: Randomness not resolved */
export const TOKENLOTTERY_ERROR__RANDOMNESS_NOT_RESOLVED = 0x1775; // 6005
/** WinnerNotChosen: Winner not chosen */
export const TOKENLOTTERY_ERROR__WINNER_NOT_CHOSEN = 0x1776; // 6006
/** WinnerChosen: Winner already chosen */
export const TOKENLOTTERY_ERROR__WINNER_CHOSEN = 0x1777; // 6007
/** NotVerifiedTicket: Ticket is not verified */
export const TOKENLOTTERY_ERROR__NOT_VERIFIED_TICKET = 0x1778; // 6008
/** IncorrectTicket: Incorrect ticket */
export const TOKENLOTTERY_ERROR__INCORRECT_TICKET = 0x1779; // 6009

export type TokenlotteryError =
  | typeof TOKENLOTTERY_ERROR__INCORRECT_RANDOMNESS_ACCOUNT
  | typeof TOKENLOTTERY_ERROR__INCORRECT_TICKET
  | typeof TOKENLOTTERY_ERROR__LOTTERY_NOT_COMPLETED
  | typeof TOKENLOTTERY_ERROR__LOTTERY_NOT_OPEN
  | typeof TOKENLOTTERY_ERROR__NOT_AUTHORIZED
  | typeof TOKENLOTTERY_ERROR__NOT_VERIFIED_TICKET
  | typeof TOKENLOTTERY_ERROR__RANDOMNESS_ALREADY_REVEALED
  | typeof TOKENLOTTERY_ERROR__RANDOMNESS_NOT_RESOLVED
  | typeof TOKENLOTTERY_ERROR__WINNER_CHOSEN
  | typeof TOKENLOTTERY_ERROR__WINNER_NOT_CHOSEN;

let tokenlotteryErrorMessages: Record<TokenlotteryError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  tokenlotteryErrorMessages = {
    [TOKENLOTTERY_ERROR__INCORRECT_RANDOMNESS_ACCOUNT]: `Incorrect randomness account`,
    [TOKENLOTTERY_ERROR__INCORRECT_TICKET]: `Incorrect ticket`,
    [TOKENLOTTERY_ERROR__LOTTERY_NOT_COMPLETED]: `Lottery not completed`,
    [TOKENLOTTERY_ERROR__LOTTERY_NOT_OPEN]: `Lottery is not open`,
    [TOKENLOTTERY_ERROR__NOT_AUTHORIZED]: `Not authorized`,
    [TOKENLOTTERY_ERROR__NOT_VERIFIED_TICKET]: `Ticket is not verified`,
    [TOKENLOTTERY_ERROR__RANDOMNESS_ALREADY_REVEALED]: `Randomness already revealed`,
    [TOKENLOTTERY_ERROR__RANDOMNESS_NOT_RESOLVED]: `Randomness not resolved`,
    [TOKENLOTTERY_ERROR__WINNER_CHOSEN]: `Winner already chosen`,
    [TOKENLOTTERY_ERROR__WINNER_NOT_CHOSEN]: `Winner not chosen`,
  };
}

export function getTokenlotteryErrorMessage(code: TokenlotteryError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (tokenlotteryErrorMessages as Record<TokenlotteryError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isTokenlotteryError<
  TProgramErrorCode extends TokenlotteryError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TOKENLOTTERY_PROGRAM_ADDRESS,
    code
  );
}
