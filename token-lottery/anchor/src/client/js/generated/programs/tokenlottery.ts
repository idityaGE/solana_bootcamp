/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedBuyTicketInstruction,
  type ParsedChooseAWinnerInstruction,
  type ParsedClaimPrizeInstruction,
  type ParsedCommitAWinnerInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeLotteryInstruction,
} from '../instructions';

export const TOKENLOTTERY_PROGRAM_ADDRESS =
  'dqkzsjJc7s3uJXYr6zcP2Nn1s29u9odAJsfbEYENU3v' as Address<'dqkzsjJc7s3uJXYr6zcP2Nn1s29u9odAJsfbEYENU3v'>;

export enum TokenlotteryAccount {
  TokenLottery,
}

export function identifyTokenlotteryAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenlotteryAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([219, 174, 104, 58, 76, 30, 61, 218])
      ),
      0
    )
  ) {
    return TokenlotteryAccount.TokenLottery;
  }
  throw new Error(
    'The provided account could not be identified as a tokenlottery account.'
  );
}

export enum TokenlotteryInstruction {
  BuyTicket,
  ChooseAWinner,
  ClaimPrize,
  CommitAWinner,
  InitializeConfig,
  InitializeLottery,
}

export function identifyTokenlotteryInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenlotteryInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 24, 17, 193, 168, 116, 164, 169])
      ),
      0
    )
  ) {
    return TokenlotteryInstruction.BuyTicket;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([93, 141, 57, 235, 103, 131, 163, 252])
      ),
      0
    )
  ) {
    return TokenlotteryInstruction.ChooseAWinner;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([157, 233, 139, 121, 246, 62, 234, 235])
      ),
      0
    )
  ) {
    return TokenlotteryInstruction.ClaimPrize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([142, 122, 254, 195, 220, 205, 224, 236])
      ),
      0
    )
  ) {
    return TokenlotteryInstruction.CommitAWinner;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 127, 21, 1, 194, 190, 196, 70])
      ),
      0
    )
  ) {
    return TokenlotteryInstruction.InitializeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([113, 199, 243, 247, 73, 217, 33, 11])
      ),
      0
    )
  ) {
    return TokenlotteryInstruction.InitializeLottery;
  }
  throw new Error(
    'The provided instruction could not be identified as a tokenlottery instruction.'
  );
}

export type ParsedTokenlotteryInstruction<
  TProgram extends string = 'dqkzsjJc7s3uJXYr6zcP2Nn1s29u9odAJsfbEYENU3v',
> =
  | ({
      instructionType: TokenlotteryInstruction.BuyTicket;
    } & ParsedBuyTicketInstruction<TProgram>)
  | ({
      instructionType: TokenlotteryInstruction.ChooseAWinner;
    } & ParsedChooseAWinnerInstruction<TProgram>)
  | ({
      instructionType: TokenlotteryInstruction.ClaimPrize;
    } & ParsedClaimPrizeInstruction<TProgram>)
  | ({
      instructionType: TokenlotteryInstruction.CommitAWinner;
    } & ParsedCommitAWinnerInstruction<TProgram>)
  | ({
      instructionType: TokenlotteryInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: TokenlotteryInstruction.InitializeLottery;
    } & ParsedInitializeLotteryInstruction<TProgram>);
