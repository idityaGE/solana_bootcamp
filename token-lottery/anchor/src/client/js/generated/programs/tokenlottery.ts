/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedInitConfigInstruction,
  type ParsedInitLotteryInstruction,
} from '../instructions';

export const TOKENLOTTERY_PROGRAM_ADDRESS =
  'GkjnkEPxTcYPRXFD6jx651UVP79McRB8DssM2ABfPBpQ' as Address<'GkjnkEPxTcYPRXFD6jx651UVP79McRB8DssM2ABfPBpQ'>;

export enum TokenlotteryAccount {
  TokenLottery,
}

export function identifyTokenlotteryAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenlotteryAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([219, 174, 104, 58, 76, 30, 61, 218])
      ),
      0
    )
  ) {
    return TokenlotteryAccount.TokenLottery;
  }
  throw new Error(
    'The provided account could not be identified as a tokenlottery account.'
  );
}

export enum TokenlotteryInstruction {
  InitConfig,
  InitLottery,
}

export function identifyTokenlotteryInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TokenlotteryInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([23, 235, 115, 232, 168, 96, 1, 231])
      ),
      0
    )
  ) {
    return TokenlotteryInstruction.InitConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 2, 161, 251, 245, 9, 57, 232])
      ),
      0
    )
  ) {
    return TokenlotteryInstruction.InitLottery;
  }
  throw new Error(
    'The provided instruction could not be identified as a tokenlottery instruction.'
  );
}

export type ParsedTokenlotteryInstruction<
  TProgram extends string = 'GkjnkEPxTcYPRXFD6jx651UVP79McRB8DssM2ABfPBpQ',
> =
  | ({
      instructionType: TokenlotteryInstruction.InitConfig;
    } & ParsedInitConfigInstruction<TProgram>)
  | ({
      instructionType: TokenlotteryInstruction.InitLottery;
    } & ParsedInitLotteryInstruction<TProgram>);
