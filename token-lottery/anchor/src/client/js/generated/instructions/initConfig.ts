/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TOKENLOTTERY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INIT_CONFIG_DISCRIMINATOR = new Uint8Array([
  23, 235, 115, 232, 168, 96, 1, 231,
]);

export function getInitConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INIT_CONFIG_DISCRIMINATOR);
}

export type InitConfigInstruction<
  TProgram extends string = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTokenLottery extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenLottery extends string
        ? WritableAccount<TAccountTokenLottery>
        : TAccountTokenLottery,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  start: bigint;
  end: bigint;
  price: bigint;
};

export type InitConfigInstructionDataArgs = {
  start: number | bigint;
  end: number | bigint;
  price: number | bigint;
};

export function getInitConfigInstructionDataEncoder(): FixedSizeEncoder<InitConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['start', getU64Encoder()],
      ['end', getU64Encoder()],
      ['price', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INIT_CONFIG_DISCRIMINATOR })
  );
}

export function getInitConfigInstructionDataDecoder(): FixedSizeDecoder<InitConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['start', getU64Decoder()],
    ['end', getU64Decoder()],
    ['price', getU64Decoder()],
  ]);
}

export function getInitConfigInstructionDataCodec(): FixedSizeCodec<
  InitConfigInstructionDataArgs,
  InitConfigInstructionData
> {
  return combineCodec(
    getInitConfigInstructionDataEncoder(),
    getInitConfigInstructionDataDecoder()
  );
}

export type InitConfigAsyncInput<
  TAccountPayer extends string = string,
  TAccountTokenLottery extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  tokenLottery?: Address<TAccountTokenLottery>;
  systemProgram?: Address<TAccountSystemProgram>;
  start: InitConfigInstructionDataArgs['start'];
  end: InitConfigInstructionDataArgs['end'];
  price: InitConfigInstructionDataArgs['price'];
};

export async function getInitConfigInstructionAsync<
  TAccountPayer extends string,
  TAccountTokenLottery extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
>(
  input: InitConfigAsyncInput<
    TAccountPayer,
    TAccountTokenLottery,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKENLOTTERY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    tokenLottery: { value: input.tokenLottery ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenLottery.value) {
    accounts.tokenLottery.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            116, 111, 107, 101, 110, 95, 108, 111, 116, 116, 101, 114, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenLottery),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitConfigInstructionDataEncoder().encode(
      args as InitConfigInstructionDataArgs
    ),
    programAddress,
  } as InitConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountSystemProgram
  >);
}

export type InitConfigInput<
  TAccountPayer extends string = string,
  TAccountTokenLottery extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  tokenLottery: Address<TAccountTokenLottery>;
  systemProgram?: Address<TAccountSystemProgram>;
  start: InitConfigInstructionDataArgs['start'];
  end: InitConfigInstructionDataArgs['end'];
  price: InitConfigInstructionDataArgs['price'];
};

export function getInitConfigInstruction<
  TAccountPayer extends string,
  TAccountTokenLottery extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
>(
  input: InitConfigInput<
    TAccountPayer,
    TAccountTokenLottery,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitConfigInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountTokenLottery,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKENLOTTERY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    tokenLottery: { value: input.tokenLottery ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenLottery),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitConfigInstructionDataEncoder().encode(
      args as InitConfigInstructionDataArgs
    ),
    programAddress,
  } as InitConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountSystemProgram
  >);
}

export type ParsedInitConfigInstruction<
  TProgram extends string = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    tokenLottery: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitConfigInstructionData;
};

export function parseInitConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      tokenLottery: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitConfigInstructionDataDecoder().decode(instruction.data),
  };
}
