/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TOKENLOTTERY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const BUY_TICKET_DISCRIMINATOR = new Uint8Array([
  11, 24, 17, 193, 168, 116, 164, 169,
]);

export function getBuyTicketDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(BUY_TICKET_DISCRIMINATOR);
}

export type BuyTicketInstruction<
  TProgram extends string = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTokenLottery extends string | AccountMeta<string> = string,
  TAccountTicketMint extends string | AccountMeta<string> = string,
  TAccountDestination extends string | AccountMeta<string> = string,
  TAccountMetadata extends string | AccountMeta<string> = string,
  TAccountMasterEdition extends string | AccountMeta<string> = string,
  TAccountCollectionMetadata extends string | AccountMeta<string> = string,
  TAccountCollectionMasterEdition extends string | AccountMeta<string> = string,
  TAccountCollectionMint extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenMetadataProgram extends
    | string
    | AccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenLottery extends string
        ? WritableAccount<TAccountTokenLottery>
        : TAccountTokenLottery,
      TAccountTicketMint extends string
        ? WritableAccount<TAccountTicketMint>
        : TAccountTicketMint,
      TAccountDestination extends string
        ? WritableAccount<TAccountDestination>
        : TAccountDestination,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountMasterEdition extends string
        ? WritableAccount<TAccountMasterEdition>
        : TAccountMasterEdition,
      TAccountCollectionMetadata extends string
        ? WritableAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountCollectionMasterEdition extends string
        ? WritableAccount<TAccountCollectionMasterEdition>
        : TAccountCollectionMasterEdition,
      TAccountCollectionMint extends string
        ? WritableAccount<TAccountCollectionMint>
        : TAccountCollectionMint,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type BuyTicketInstructionData = { discriminator: ReadonlyUint8Array };

export type BuyTicketInstructionDataArgs = {};

export function getBuyTicketInstructionDataEncoder(): FixedSizeEncoder<BuyTicketInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: BUY_TICKET_DISCRIMINATOR })
  );
}

export function getBuyTicketInstructionDataDecoder(): FixedSizeDecoder<BuyTicketInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getBuyTicketInstructionDataCodec(): FixedSizeCodec<
  BuyTicketInstructionDataArgs,
  BuyTicketInstructionData
> {
  return combineCodec(
    getBuyTicketInstructionDataEncoder(),
    getBuyTicketInstructionDataDecoder()
  );
}

export type BuyTicketAsyncInput<
  TAccountPayer extends string = string,
  TAccountTokenLottery extends string = string,
  TAccountTicketMint extends string = string,
  TAccountDestination extends string = string,
  TAccountMetadata extends string = string,
  TAccountMasterEdition extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountCollectionMasterEdition extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountRent extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  tokenLottery?: Address<TAccountTokenLottery>;
  ticketMint: Address<TAccountTicketMint>;
  destination?: Address<TAccountDestination>;
  metadata?: Address<TAccountMetadata>;
  masterEdition?: Address<TAccountMasterEdition>;
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  collectionMasterEdition?: Address<TAccountCollectionMasterEdition>;
  collectionMint?: Address<TAccountCollectionMint>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  rent?: Address<TAccountRent>;
};

export async function getBuyTicketInstructionAsync<
  TAccountPayer extends string,
  TAccountTokenLottery extends string,
  TAccountTicketMint extends string,
  TAccountDestination extends string,
  TAccountMetadata extends string,
  TAccountMasterEdition extends string,
  TAccountCollectionMetadata extends string,
  TAccountCollectionMasterEdition extends string,
  TAccountCollectionMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
>(
  input: BuyTicketAsyncInput<
    TAccountPayer,
    TAccountTokenLottery,
    TAccountTicketMint,
    TAccountDestination,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountCollectionMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  BuyTicketInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountTicketMint,
    TAccountDestination,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountCollectionMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKENLOTTERY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    tokenLottery: { value: input.tokenLottery ?? null, isWritable: true },
    ticketMint: { value: input.ticketMint ?? null, isWritable: true },
    destination: { value: input.destination ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: true },
    masterEdition: { value: input.masterEdition ?? null, isWritable: true },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    collectionMasterEdition: {
      value: input.collectionMasterEdition ?? null,
      isWritable: true,
    },
    collectionMint: { value: input.collectionMint ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenLottery.value) {
    accounts.tokenLottery.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            116, 111, 107, 101, 110, 95, 108, 111, 116, 116, 101, 114, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.destination.value) {
    accounts.destination.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.payer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.ticketMint.value)),
      ],
    });
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.metadata.value) {
    accounts.metadata.value = await getProgramDerivedAddress({
      programAddress:
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenMetadataProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.ticketMint.value)),
      ],
    });
  }
  if (!accounts.masterEdition.value) {
    accounts.masterEdition.value = await getProgramDerivedAddress({
      programAddress:
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenMetadataProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.ticketMint.value)),
        getBytesEncoder().encode(
          new Uint8Array([101, 100, 105, 116, 105, 111, 110])
        ),
      ],
    });
  }
  if (!accounts.collectionMint.value) {
    accounts.collectionMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 95, 109, 105, 110,
            116,
          ])
        ),
      ],
    });
  }
  if (!accounts.collectionMetadata.value) {
    accounts.collectionMetadata.value = await getProgramDerivedAddress({
      programAddress:
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenMetadataProgram.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.collectionMint.value)
        ),
      ],
    });
  }
  if (!accounts.collectionMasterEdition.value) {
    accounts.collectionMasterEdition.value = await getProgramDerivedAddress({
      programAddress:
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenMetadataProgram.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.collectionMint.value)
        ),
        getBytesEncoder().encode(
          new Uint8Array([101, 100, 105, 116, 105, 111, 110])
        ),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenLottery),
      getAccountMeta(accounts.ticketMint),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.masterEdition),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.collectionMasterEdition),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getBuyTicketInstructionDataEncoder().encode({}),
    programAddress,
  } as BuyTicketInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountTicketMint,
    TAccountDestination,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountCollectionMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram,
    TAccountRent
  >);
}

export type BuyTicketInput<
  TAccountPayer extends string = string,
  TAccountTokenLottery extends string = string,
  TAccountTicketMint extends string = string,
  TAccountDestination extends string = string,
  TAccountMetadata extends string = string,
  TAccountMasterEdition extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountCollectionMasterEdition extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
  TAccountRent extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  tokenLottery: Address<TAccountTokenLottery>;
  ticketMint: Address<TAccountTicketMint>;
  destination: Address<TAccountDestination>;
  metadata: Address<TAccountMetadata>;
  masterEdition: Address<TAccountMasterEdition>;
  collectionMetadata: Address<TAccountCollectionMetadata>;
  collectionMasterEdition: Address<TAccountCollectionMasterEdition>;
  collectionMint: Address<TAccountCollectionMint>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  rent?: Address<TAccountRent>;
};

export function getBuyTicketInstruction<
  TAccountPayer extends string,
  TAccountTokenLottery extends string,
  TAccountTicketMint extends string,
  TAccountDestination extends string,
  TAccountMetadata extends string,
  TAccountMasterEdition extends string,
  TAccountCollectionMetadata extends string,
  TAccountCollectionMasterEdition extends string,
  TAccountCollectionMint extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
>(
  input: BuyTicketInput<
    TAccountPayer,
    TAccountTokenLottery,
    TAccountTicketMint,
    TAccountDestination,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountCollectionMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): BuyTicketInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountTokenLottery,
  TAccountTicketMint,
  TAccountDestination,
  TAccountMetadata,
  TAccountMasterEdition,
  TAccountCollectionMetadata,
  TAccountCollectionMasterEdition,
  TAccountCollectionMint,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountTokenMetadataProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKENLOTTERY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    tokenLottery: { value: input.tokenLottery ?? null, isWritable: true },
    ticketMint: { value: input.ticketMint ?? null, isWritable: true },
    destination: { value: input.destination ?? null, isWritable: true },
    metadata: { value: input.metadata ?? null, isWritable: true },
    masterEdition: { value: input.masterEdition ?? null, isWritable: true },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    collectionMasterEdition: {
      value: input.collectionMasterEdition ?? null,
      isWritable: true,
    },
    collectionMint: { value: input.collectionMint ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenLottery),
      getAccountMeta(accounts.ticketMint),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.masterEdition),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.collectionMasterEdition),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getBuyTicketInstructionDataEncoder().encode({}),
    programAddress,
  } as BuyTicketInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountTicketMint,
    TAccountDestination,
    TAccountMetadata,
    TAccountMasterEdition,
    TAccountCollectionMetadata,
    TAccountCollectionMasterEdition,
    TAccountCollectionMint,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram,
    TAccountRent
  >);
}

export type ParsedBuyTicketInstruction<
  TProgram extends string = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    tokenLottery: TAccountMetas[1];
    ticketMint: TAccountMetas[2];
    destination: TAccountMetas[3];
    metadata: TAccountMetas[4];
    masterEdition: TAccountMetas[5];
    collectionMetadata: TAccountMetas[6];
    collectionMasterEdition: TAccountMetas[7];
    collectionMint: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
    tokenMetadataProgram: TAccountMetas[12];
    rent: TAccountMetas[13];
  };
  data: BuyTicketInstructionData;
};

export function parseBuyTicketInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedBuyTicketInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      tokenLottery: getNextAccount(),
      ticketMint: getNextAccount(),
      destination: getNextAccount(),
      metadata: getNextAccount(),
      masterEdition: getNextAccount(),
      collectionMetadata: getNextAccount(),
      collectionMasterEdition: getNextAccount(),
      collectionMint: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getBuyTicketInstructionDataDecoder().decode(instruction.data),
  };
}
