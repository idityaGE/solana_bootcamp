/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TOKENLOTTERY_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CHOOSE_A_WINNER_DISCRIMINATOR = new Uint8Array([
  93, 141, 57, 235, 103, 131, 163, 252,
]);

export function getChooseAWinnerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CHOOSE_A_WINNER_DISCRIMINATOR
  );
}

export type ChooseAWinnerInstruction<
  TProgram extends string = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTokenLottery extends string | AccountMeta<string> = string,
  TAccountRandomnessAccountData extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenLottery extends string
        ? WritableAccount<TAccountTokenLottery>
        : TAccountTokenLottery,
      TAccountRandomnessAccountData extends string
        ? ReadonlyAccount<TAccountRandomnessAccountData>
        : TAccountRandomnessAccountData,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ChooseAWinnerInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ChooseAWinnerInstructionDataArgs = {};

export function getChooseAWinnerInstructionDataEncoder(): FixedSizeEncoder<ChooseAWinnerInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CHOOSE_A_WINNER_DISCRIMINATOR })
  );
}

export function getChooseAWinnerInstructionDataDecoder(): FixedSizeDecoder<ChooseAWinnerInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getChooseAWinnerInstructionDataCodec(): FixedSizeCodec<
  ChooseAWinnerInstructionDataArgs,
  ChooseAWinnerInstructionData
> {
  return combineCodec(
    getChooseAWinnerInstructionDataEncoder(),
    getChooseAWinnerInstructionDataDecoder()
  );
}

export type ChooseAWinnerAsyncInput<
  TAccountPayer extends string = string,
  TAccountTokenLottery extends string = string,
  TAccountRandomnessAccountData extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  tokenLottery?: Address<TAccountTokenLottery>;
  randomnessAccountData: Address<TAccountRandomnessAccountData>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getChooseAWinnerInstructionAsync<
  TAccountPayer extends string,
  TAccountTokenLottery extends string,
  TAccountRandomnessAccountData extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
>(
  input: ChooseAWinnerAsyncInput<
    TAccountPayer,
    TAccountTokenLottery,
    TAccountRandomnessAccountData,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ChooseAWinnerInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountRandomnessAccountData,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKENLOTTERY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    tokenLottery: { value: input.tokenLottery ?? null, isWritable: true },
    randomnessAccountData: {
      value: input.randomnessAccountData ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenLottery.value) {
    accounts.tokenLottery.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            116, 111, 107, 101, 110, 95, 108, 111, 116, 116, 101, 114, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenLottery),
      getAccountMeta(accounts.randomnessAccountData),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getChooseAWinnerInstructionDataEncoder().encode({}),
    programAddress,
  } as ChooseAWinnerInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountRandomnessAccountData,
    TAccountSystemProgram
  >);
}

export type ChooseAWinnerInput<
  TAccountPayer extends string = string,
  TAccountTokenLottery extends string = string,
  TAccountRandomnessAccountData extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  tokenLottery: Address<TAccountTokenLottery>;
  randomnessAccountData: Address<TAccountRandomnessAccountData>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getChooseAWinnerInstruction<
  TAccountPayer extends string,
  TAccountTokenLottery extends string,
  TAccountRandomnessAccountData extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
>(
  input: ChooseAWinnerInput<
    TAccountPayer,
    TAccountTokenLottery,
    TAccountRandomnessAccountData,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ChooseAWinnerInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountTokenLottery,
  TAccountRandomnessAccountData,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKENLOTTERY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    tokenLottery: { value: input.tokenLottery ?? null, isWritable: true },
    randomnessAccountData: {
      value: input.randomnessAccountData ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenLottery),
      getAccountMeta(accounts.randomnessAccountData),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getChooseAWinnerInstructionDataEncoder().encode({}),
    programAddress,
  } as ChooseAWinnerInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountRandomnessAccountData,
    TAccountSystemProgram
  >);
}

export type ParsedChooseAWinnerInstruction<
  TProgram extends string = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    tokenLottery: TAccountMetas[1];
    randomnessAccountData: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: ChooseAWinnerInstructionData;
};

export function parseChooseAWinnerInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedChooseAWinnerInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      tokenLottery: getNextAccount(),
      randomnessAccountData: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getChooseAWinnerInstructionDataDecoder().decode(instruction.data),
  };
}
