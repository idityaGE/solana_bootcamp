/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TOKENLOTTERY_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_PRIZE_DISCRIMINATOR = new Uint8Array([
  157, 233, 139, 121, 246, 62, 234, 235,
]);

export function getClaimPrizeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_PRIZE_DISCRIMINATOR);
}

export type ClaimPrizeInstruction<
  TProgram extends string = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountTokenLottery extends string | AccountMeta<string> = string,
  TAccountCollectionMint extends string | AccountMeta<string> = string,
  TAccountTicketMint extends string | AccountMeta<string> = string,
  TAccountMetadata extends string | AccountMeta<string> = string,
  TAccountDestination extends string | AccountMeta<string> = string,
  TAccountCollectionMetadata extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenMetadataProgram extends
    | string
    | AccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountTokenLottery extends string
        ? WritableAccount<TAccountTokenLottery>
        : TAccountTokenLottery,
      TAccountCollectionMint extends string
        ? WritableAccount<TAccountCollectionMint>
        : TAccountCollectionMint,
      TAccountTicketMint extends string
        ? ReadonlyAccount<TAccountTicketMint>
        : TAccountTicketMint,
      TAccountMetadata extends string
        ? ReadonlyAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountDestination extends string
        ? ReadonlyAccount<TAccountDestination>
        : TAccountDestination,
      TAccountCollectionMetadata extends string
        ? WritableAccount<TAccountCollectionMetadata>
        : TAccountCollectionMetadata,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimPrizeInstructionData = { discriminator: ReadonlyUint8Array };

export type ClaimPrizeInstructionDataArgs = {};

export function getClaimPrizeInstructionDataEncoder(): FixedSizeEncoder<ClaimPrizeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLAIM_PRIZE_DISCRIMINATOR })
  );
}

export function getClaimPrizeInstructionDataDecoder(): FixedSizeDecoder<ClaimPrizeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClaimPrizeInstructionDataCodec(): FixedSizeCodec<
  ClaimPrizeInstructionDataArgs,
  ClaimPrizeInstructionData
> {
  return combineCodec(
    getClaimPrizeInstructionDataEncoder(),
    getClaimPrizeInstructionDataDecoder()
  );
}

export type ClaimPrizeAsyncInput<
  TAccountPayer extends string = string,
  TAccountTokenLottery extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountTicketMint extends string = string,
  TAccountMetadata extends string = string,
  TAccountDestination extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  tokenLottery?: Address<TAccountTokenLottery>;
  collectionMint?: Address<TAccountCollectionMint>;
  ticketMint: Address<TAccountTicketMint>;
  metadata?: Address<TAccountMetadata>;
  destination?: Address<TAccountDestination>;
  collectionMetadata?: Address<TAccountCollectionMetadata>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
};

export async function getClaimPrizeInstructionAsync<
  TAccountPayer extends string,
  TAccountTokenLottery extends string,
  TAccountCollectionMint extends string,
  TAccountTicketMint extends string,
  TAccountMetadata extends string,
  TAccountDestination extends string,
  TAccountCollectionMetadata extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TProgramAddress extends Address = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
>(
  input: ClaimPrizeAsyncInput<
    TAccountPayer,
    TAccountTokenLottery,
    TAccountCollectionMint,
    TAccountTicketMint,
    TAccountMetadata,
    TAccountDestination,
    TAccountCollectionMetadata,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimPrizeInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountCollectionMint,
    TAccountTicketMint,
    TAccountMetadata,
    TAccountDestination,
    TAccountCollectionMetadata,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKENLOTTERY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    tokenLottery: { value: input.tokenLottery ?? null, isWritable: true },
    collectionMint: { value: input.collectionMint ?? null, isWritable: true },
    ticketMint: { value: input.ticketMint ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: false },
    destination: { value: input.destination ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenLottery.value) {
    accounts.tokenLottery.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            116, 111, 107, 101, 110, 95, 108, 111, 116, 116, 101, 114, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.collectionMint.value) {
    accounts.collectionMint.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 95, 109, 105, 110,
            116,
          ])
        ),
      ],
    });
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.metadata.value) {
    accounts.metadata.value = await getProgramDerivedAddress({
      programAddress:
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenMetadataProgram.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.ticketMint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.destination.value) {
    accounts.destination.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.payer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.ticketMint.value)),
      ],
    });
  }
  if (!accounts.collectionMetadata.value) {
    accounts.collectionMetadata.value = await getProgramDerivedAddress({
      programAddress:
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([109, 101, 116, 97, 100, 97, 116, 97])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.tokenMetadataProgram.value)
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.collectionMint.value)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenLottery),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.ticketMint),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
    ],
    data: getClaimPrizeInstructionDataEncoder().encode({}),
    programAddress,
  } as ClaimPrizeInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountCollectionMint,
    TAccountTicketMint,
    TAccountMetadata,
    TAccountDestination,
    TAccountCollectionMetadata,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram
  >);
}

export type ClaimPrizeInput<
  TAccountPayer extends string = string,
  TAccountTokenLottery extends string = string,
  TAccountCollectionMint extends string = string,
  TAccountTicketMint extends string = string,
  TAccountMetadata extends string = string,
  TAccountDestination extends string = string,
  TAccountCollectionMetadata extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenMetadataProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  tokenLottery: Address<TAccountTokenLottery>;
  collectionMint: Address<TAccountCollectionMint>;
  ticketMint: Address<TAccountTicketMint>;
  metadata: Address<TAccountMetadata>;
  destination: Address<TAccountDestination>;
  collectionMetadata: Address<TAccountCollectionMetadata>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
};

export function getClaimPrizeInstruction<
  TAccountPayer extends string,
  TAccountTokenLottery extends string,
  TAccountCollectionMint extends string,
  TAccountTicketMint extends string,
  TAccountMetadata extends string,
  TAccountDestination extends string,
  TAccountCollectionMetadata extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenMetadataProgram extends string,
  TProgramAddress extends Address = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
>(
  input: ClaimPrizeInput<
    TAccountPayer,
    TAccountTokenLottery,
    TAccountCollectionMint,
    TAccountTicketMint,
    TAccountMetadata,
    TAccountDestination,
    TAccountCollectionMetadata,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimPrizeInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountTokenLottery,
  TAccountCollectionMint,
  TAccountTicketMint,
  TAccountMetadata,
  TAccountDestination,
  TAccountCollectionMetadata,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountTokenMetadataProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TOKENLOTTERY_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    tokenLottery: { value: input.tokenLottery ?? null, isWritable: true },
    collectionMint: { value: input.collectionMint ?? null, isWritable: true },
    ticketMint: { value: input.ticketMint ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: false },
    destination: { value: input.destination ?? null, isWritable: false },
    collectionMetadata: {
      value: input.collectionMetadata ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.tokenLottery),
      getAccountMeta(accounts.collectionMint),
      getAccountMeta(accounts.ticketMint),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.collectionMetadata),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenMetadataProgram),
    ],
    data: getClaimPrizeInstructionDataEncoder().encode({}),
    programAddress,
  } as ClaimPrizeInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountTokenLottery,
    TAccountCollectionMint,
    TAccountTicketMint,
    TAccountMetadata,
    TAccountDestination,
    TAccountCollectionMetadata,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountTokenMetadataProgram
  >);
}

export type ParsedClaimPrizeInstruction<
  TProgram extends string = typeof TOKENLOTTERY_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    tokenLottery: TAccountMetas[1];
    collectionMint: TAccountMetas[2];
    ticketMint: TAccountMetas[3];
    metadata: TAccountMetas[4];
    destination: TAccountMetas[5];
    collectionMetadata: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    tokenMetadataProgram: TAccountMetas[9];
  };
  data: ClaimPrizeInstructionData;
};

export function parseClaimPrizeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimPrizeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      tokenLottery: getNextAccount(),
      collectionMint: getNextAccount(),
      ticketMint: getNextAccount(),
      metadata: getNextAccount(),
      destination: getNextAccount(),
      collectionMetadata: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
    },
    data: getClaimPrizeInstructionDataDecoder().decode(instruction.data),
  };
}
